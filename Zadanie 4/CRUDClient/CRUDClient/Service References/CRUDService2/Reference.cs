//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUDClient.CRUDService2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Review", Namespace="http://schemas.datacontract.org/2004/07/ObjectsManager.Model")]
    [System.SerializableAttribute()]
    public partial class Review : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CRUDClient.CRUDService2.Person AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MovieIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CRUDClient.CRUDService2.Person Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MovieId {
            get {
                return this.MovieIdField;
            }
            set {
                if ((this.MovieIdField.Equals(value) != true)) {
                    this.MovieIdField = value;
                    this.RaisePropertyChanged("MovieId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/ObjectsManager.Model")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CRUDService2.ICRUDService2")]
    public interface ICRUDService2 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/GetAllReviews", ReplyAction="http://tempuri.org/ICRUDService2/GetAllReviewsResponse")]
        CRUDClient.CRUDService2.Review[] GetAllReviews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/GetAllReviews", ReplyAction="http://tempuri.org/ICRUDService2/GetAllReviewsResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review[]> GetAllReviewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/GetReviewsByMovieId", ReplyAction="http://tempuri.org/ICRUDService2/GetReviewsByMovieIdResponse")]
        CRUDClient.CRUDService2.Review[] GetReviewsByMovieId(int movieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/GetReviewsByMovieId", ReplyAction="http://tempuri.org/ICRUDService2/GetReviewsByMovieIdResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review[]> GetReviewsByMovieIdAsync(int movieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/GetReviewsByAuthor", ReplyAction="http://tempuri.org/ICRUDService2/GetReviewsByAuthorResponse")]
        CRUDClient.CRUDService2.Review[] GetReviewsByAuthor(CRUDClient.CRUDService2.Person Author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/GetReviewsByAuthor", ReplyAction="http://tempuri.org/ICRUDService2/GetReviewsByAuthorResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review[]> GetReviewsByAuthorAsync(CRUDClient.CRUDService2.Person Author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/GetAllAuthors", ReplyAction="http://tempuri.org/ICRUDService2/GetAllAuthorsResponse")]
        CRUDClient.CRUDService2.Person[] GetAllAuthors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/GetAllAuthors", ReplyAction="http://tempuri.org/ICRUDService2/GetAllAuthorsResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Person[]> GetAllAuthorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/AddReview", ReplyAction="http://tempuri.org/ICRUDService2/AddReviewResponse")]
        int AddReview(CRUDClient.CRUDService2.Review rev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/AddReview", ReplyAction="http://tempuri.org/ICRUDService2/AddReviewResponse")]
        System.Threading.Tasks.Task<int> AddReviewAsync(CRUDClient.CRUDService2.Review rev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/AddAuthor", ReplyAction="http://tempuri.org/ICRUDService2/AddAuthorResponse")]
        int AddAuthor(CRUDClient.CRUDService2.Person author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/AddAuthor", ReplyAction="http://tempuri.org/ICRUDService2/AddAuthorResponse")]
        System.Threading.Tasks.Task<int> AddAuthorAsync(CRUDClient.CRUDService2.Person author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/getReview", ReplyAction="http://tempuri.org/ICRUDService2/getReviewResponse")]
        CRUDClient.CRUDService2.Review getReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/getReview", ReplyAction="http://tempuri.org/ICRUDService2/getReviewResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review> getReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/getAuthorById", ReplyAction="http://tempuri.org/ICRUDService2/getAuthorByIdResponse")]
        CRUDClient.CRUDService2.Person getAuthorById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/getAuthorById", ReplyAction="http://tempuri.org/ICRUDService2/getAuthorByIdResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Person> getAuthorByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/getAuthorByName", ReplyAction="http://tempuri.org/ICRUDService2/getAuthorByNameResponse")]
        CRUDClient.CRUDService2.Person getAuthorByName(string Name, string Surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/getAuthorByName", ReplyAction="http://tempuri.org/ICRUDService2/getAuthorByNameResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Person> getAuthorByNameAsync(string Name, string Surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/UpdateReview", ReplyAction="http://tempuri.org/ICRUDService2/UpdateReviewResponse")]
        CRUDClient.CRUDService2.Review UpdateReview(CRUDClient.CRUDService2.Review second);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/UpdateReview", ReplyAction="http://tempuri.org/ICRUDService2/UpdateReviewResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review> UpdateReviewAsync(CRUDClient.CRUDService2.Review second);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/UpdateAuthor", ReplyAction="http://tempuri.org/ICRUDService2/UpdateAuthorResponse")]
        CRUDClient.CRUDService2.Person UpdateAuthor(CRUDClient.CRUDService2.Person second);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/UpdateAuthor", ReplyAction="http://tempuri.org/ICRUDService2/UpdateAuthorResponse")]
        System.Threading.Tasks.Task<CRUDClient.CRUDService2.Person> UpdateAuthorAsync(CRUDClient.CRUDService2.Person second);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/deleteReview", ReplyAction="http://tempuri.org/ICRUDService2/deleteReviewResponse")]
        bool deleteReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/deleteReview", ReplyAction="http://tempuri.org/ICRUDService2/deleteReviewResponse")]
        System.Threading.Tasks.Task<bool> deleteReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/deleteAuthor", ReplyAction="http://tempuri.org/ICRUDService2/deleteAuthorResponse")]
        bool deleteAuthor(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDService2/deleteAuthor", ReplyAction="http://tempuri.org/ICRUDService2/deleteAuthorResponse")]
        System.Threading.Tasks.Task<bool> deleteAuthorAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICRUDService2Channel : CRUDClient.CRUDService2.ICRUDService2, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CRUDService2Client : System.ServiceModel.ClientBase<CRUDClient.CRUDService2.ICRUDService2>, CRUDClient.CRUDService2.ICRUDService2 {
        
        public CRUDService2Client() {
        }
        
        public CRUDService2Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CRUDService2Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CRUDService2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CRUDService2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CRUDClient.CRUDService2.Review[] GetAllReviews() {
            return base.Channel.GetAllReviews();
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review[]> GetAllReviewsAsync() {
            return base.Channel.GetAllReviewsAsync();
        }
        
        public CRUDClient.CRUDService2.Review[] GetReviewsByMovieId(int movieId) {
            return base.Channel.GetReviewsByMovieId(movieId);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review[]> GetReviewsByMovieIdAsync(int movieId) {
            return base.Channel.GetReviewsByMovieIdAsync(movieId);
        }
        
        public CRUDClient.CRUDService2.Review[] GetReviewsByAuthor(CRUDClient.CRUDService2.Person Author) {
            return base.Channel.GetReviewsByAuthor(Author);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review[]> GetReviewsByAuthorAsync(CRUDClient.CRUDService2.Person Author) {
            return base.Channel.GetReviewsByAuthorAsync(Author);
        }
        
        public CRUDClient.CRUDService2.Person[] GetAllAuthors() {
            return base.Channel.GetAllAuthors();
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Person[]> GetAllAuthorsAsync() {
            return base.Channel.GetAllAuthorsAsync();
        }
        
        public int AddReview(CRUDClient.CRUDService2.Review rev) {
            return base.Channel.AddReview(rev);
        }
        
        public System.Threading.Tasks.Task<int> AddReviewAsync(CRUDClient.CRUDService2.Review rev) {
            return base.Channel.AddReviewAsync(rev);
        }
        
        public int AddAuthor(CRUDClient.CRUDService2.Person author) {
            return base.Channel.AddAuthor(author);
        }
        
        public System.Threading.Tasks.Task<int> AddAuthorAsync(CRUDClient.CRUDService2.Person author) {
            return base.Channel.AddAuthorAsync(author);
        }
        
        public CRUDClient.CRUDService2.Review getReview(int id) {
            return base.Channel.getReview(id);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review> getReviewAsync(int id) {
            return base.Channel.getReviewAsync(id);
        }
        
        public CRUDClient.CRUDService2.Person getAuthorById(int id) {
            return base.Channel.getAuthorById(id);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Person> getAuthorByIdAsync(int id) {
            return base.Channel.getAuthorByIdAsync(id);
        }
        
        public CRUDClient.CRUDService2.Person getAuthorByName(string Name, string Surname) {
            return base.Channel.getAuthorByName(Name, Surname);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Person> getAuthorByNameAsync(string Name, string Surname) {
            return base.Channel.getAuthorByNameAsync(Name, Surname);
        }
        
        public CRUDClient.CRUDService2.Review UpdateReview(CRUDClient.CRUDService2.Review second) {
            return base.Channel.UpdateReview(second);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Review> UpdateReviewAsync(CRUDClient.CRUDService2.Review second) {
            return base.Channel.UpdateReviewAsync(second);
        }
        
        public CRUDClient.CRUDService2.Person UpdateAuthor(CRUDClient.CRUDService2.Person second) {
            return base.Channel.UpdateAuthor(second);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.CRUDService2.Person> UpdateAuthorAsync(CRUDClient.CRUDService2.Person second) {
            return base.Channel.UpdateAuthorAsync(second);
        }
        
        public bool deleteReview(int id) {
            return base.Channel.deleteReview(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteReviewAsync(int id) {
            return base.Channel.deleteReviewAsync(id);
        }
        
        public bool deleteAuthor(int id) {
            return base.Channel.deleteAuthor(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAuthorAsync(int id) {
            return base.Channel.deleteAuthorAsync(id);
        }
    }
}
